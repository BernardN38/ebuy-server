version: "3.8"
volumes:
  rabbit_data:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local
  nginx_data:
    driver: local

services:
  nginx:
    image: nginx:latest
    labels:
      - traefik.enable=true
      - traefik.http.routers.ebuy.rule=Host(`ebuy.bernardn.com`)
      - traefik.http.routers.ebuy.entrypoints=traefik,web
      - traefik.http.services.nginx.loadbalancer.server.port=8080
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 128M
        reservations:
          cpus: "0.25"
          memory: 128M
    restart: always
    volumes:
      # - ./nginx.conf:/etc/nginx/nginx.conf
      - ./nginx:/etc/nginx/
      - ./client/dist:/etc/nginx/dist
      - nginx_data:/usr/share/nginx/html
      - nginx_data:/data/nginx/cache
    # ports:
    # - "443:443"
    # - "8081:8080"
    # - "8443:8443"
    depends_on:
      - authentication-service
      - product-service
      - media-service

  minio:
    image: minio/minio:latest
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    command: server --address ":9000" --console-address ":9001" /data
    ports:
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - minio_data:/data
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: bernardn
      POSTGRES_PASSWORD: password
      PGUSER: bernardn
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    restart: always
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - "5438:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-init/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: "rabbitmq"
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbit_data:/var/lib/rabbitmq/
      - rabbit_data:/var/log/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  product-service:
    build:
      context: ../product-service
      dockerfile: ./product-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      postgresDsn: "user=bernardn password=password host=postgres port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456qwertyuiopasdfghjklzxcvbnm123456"
      port: ":8080"
      dbName: "product_service"
      rabbitmqUrl: "amqp://guest:guest@rabbitmq"
    depends_on:
      - postgres
      - rabbitmq
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:8080/api/v1/products/health"]
      interval: 60s # Time between health checks
      timeout: 10s # Timeout for a single health check
      retries: 3

  order-service:
    build:
      context: ../order-service
      dockerfile: ./order-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      postgresDsn: "user=bernardn password=password host=postgres port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456qwertyuiopasdfghjklzxcvbnm123456"
      port: ":8080"
      dbName: "order_service"
      rabbitmqUrl: "amqp://guest:guest@rabbitmq"
    depends_on:
      - postgres
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/orders/health"]
      interval: 60s # Time between health checks
      timeout: 10s # Timeout for a single health check
      retries: 3

  authentication-service:
    build:
      context: ../authentication-service
      dockerfile: ./authentication-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      postgresDsn: "user=bernardn password=password host=postgres  port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456qwertyuiopasdfghjklzxcvbnm123456"
      port: ":8080"
      dbName: "authentication_service"
      # rabbitmqUrl: "amqp://guest:guest@rabbitmq"
    depends_on:
      - postgres
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/auth/health"]
      interval: 60s # Time between health checks
      timeout: 10s # Timeout for a single health check
      retries: 3

  media-service:
    build:
      context: ../media-service
      dockerfile: ./media-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 512M
    environment:
      postgresDsn: "user=bernardn password=password host=postgres port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456qwertyuiopasdfghjklzxcvbnm123456"
      port: ":8080"
      dbName: "media_service"
      # rabbitmqUrl: "amqp://guest:guest@rabbitmq"
    depends_on:
      - postgres
      - minio
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/media/health"]
      interval: 60s # Time between health checks
      timeout: 10s # Timeout for a single health check
      retries: 3

  image-proccessing-service:
    build:
      context: ../image-proccessing-service
      dockerfile: ./image-proccessing-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    depends_on:
      - rabbitmq
      - postgres
      - minio
