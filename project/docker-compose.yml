version: "3.8"

services:
  nginx:
    image: nginx:latest
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/
      - ./dist:/usr/share/nginx/html
    ports:
      - "443:443"
      - "8080:8080"
      - "8443:8443"
    depends_on:
      - authentication-service
      - product-service

  # redis:
  #   image: redis:latest
  #   container_name: my-redis
  #   ports:
  #     - "6379:6379"
  # minio:
  #   image: minio/minio
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     resources:
  #       limits:
  #         cpus: "0.50"
  #         memory: 512M
  #       reservations:
  #         cpus: "0.25"
  #         memory: 128M
  #   command: server --address ":9000" --console-address ":9001" /data
  #   ports:
  #     - "9001:9001"
  #   environment:
  #     MINIO_ACCESS_KEY: minio
  #     MINIO_SECRET_KEY: minio123
  #   volumes:
  #     - ${PWD}/minio-data:/data

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: product-service
      POSTGRES_USER: bernardn
      POSTGRES_PASSWORD: password
      PGUSER: bernardn
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M
    restart: always
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - "5438:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./database-init/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # rabbitmq:
  #   image: rabbitmq:3-management-alpine
  #   container_name: "rabbitmq"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     resources:
  #       limits:
  #         cpus: "0.50"
  #         memory: 512M
  #       reservations:
  #         cpus: "0.25"
  #         memory: 128M
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   volumes:
  #     - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
  #     - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
  #   healthcheck:
  #     test: rabbitmq-diagnostics -q ping
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3

  product-service:
    build:
      context: ../product-service
      dockerfile: ./product-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      postgresDsn: "user=bernardn password=password host=postgres port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
      port: ":8080"
      dbName: "product_service"
      # rabbitmqUrl: "amqp://guest:guest@rabbitmq"
    depends_on:
      - postgres
    #   - rabbitmq
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:8080/api/v1/products/health"]
      interval: 30s # Time between health checks
      timeout: 10s # Timeout for a single health check
      retries: 3
  authentication-service:
    build:
      context: ../authentication-service
      dockerfile: ./authentication-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      postgresDsn: "user=bernardn password=password host=postgres  port=5432 sslmode=disable"
      jwtSecret: "qwertyuiopasdfghjklzxcvbnm123456"
      port: ":8080"
      dbName: "authentication_service"
      # rabbitmqUrl: "amqp://guest:guest@rabbitmq"
    depends_on:
      - postgres
    #   - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/auth/health"]
      interval: 30s # Time between health checks
      timeout: 10s # Timeout for a single health check
      retries: 3
