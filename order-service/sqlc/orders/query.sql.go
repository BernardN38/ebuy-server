// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package orders_sql

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one



INSERT INTO orders (id) VALUES ($1) RETURNING id
`

// -- name: PatchProduct :one
// with updated as (
// UPDATE products
// SET
//
//	name = COALESCE(NULLIF($3,''), name),
//	description = COALESCE(NULLIF($4,''), description),
//	price = COALESCE(NULLIF($5,0), price)
//
// WHERE
//
//	id = $1 and owner_id = $2 returning id)
//	select count(*)
//
// from updated;
func (q *Queries) CreateProduct(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProduct, id)
	err := row.Scan(&id)
	return id, err
}

const getAll = `-- name: GetAll :many
SELECT id FROM orders
`

func (q *Queries) GetAll(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one
SELECT id FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	err := row.Scan(&id)
	return id, err
}
